/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MyListService } from "../myList.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MyListCreateInput } from "./MyListCreateInput";
import { MyList } from "./MyList";
import { MyListFindManyArgs } from "./MyListFindManyArgs";
import { MyListWhereUniqueInput } from "./MyListWhereUniqueInput";
import { MyListUpdateInput } from "./MyListUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MyListControllerBase {
  constructor(
    protected readonly service: MyListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MyList })
  @nestAccessControl.UseRoles({
    resource: "MyList",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMyList(@common.Body() data: MyListCreateInput): Promise<MyList> {
    return await this.service.createMyList({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        items: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MyList] })
  @ApiNestedQuery(MyListFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MyList",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async myLists(@common.Req() request: Request): Promise<MyList[]> {
    const args = plainToClass(MyListFindManyArgs, request.query);
    return this.service.myLists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        items: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MyList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MyList",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async myList(
    @common.Param() params: MyListWhereUniqueInput
  ): Promise<MyList | null> {
    const result = await this.service.myList({
      where: params,
      select: {
        createdAt: true,
        id: true,
        items: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MyList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MyList",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMyList(
    @common.Param() params: MyListWhereUniqueInput,
    @common.Body() data: MyListUpdateInput
  ): Promise<MyList | null> {
    try {
      return await this.service.updateMyList({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          items: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MyList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MyList",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMyList(
    @common.Param() params: MyListWhereUniqueInput
  ): Promise<MyList | null> {
    try {
      return await this.service.deleteMyList({
        where: params,
        select: {
          createdAt: true,
          id: true,
          items: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/add-to-my-list")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddToMyList(
    @common.Body()
    body: MyListUpdateInput
  ): Promise<string> {
    return this.service.AddToMyList(body);
  }

  @common.Post("/add-to-my-list")
  @swagger.ApiOkResponse({
    type: MyList,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddToMyListAction(
    @common.Body()
    body: MyListUpdateInput
  ): Promise<MyList> {
    return this.service.AddToMyListAction(body);
  }

  @common.Get("/:id/list-my-items")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListMyItems(
    @common.Body()
    body: MyListUpdateInput
  ): Promise<string> {
    return this.service.ListMyItems(body);
  }

  @common.Get("/list-my-items")
  @swagger.ApiOkResponse({
    type: MyList,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListMyItemsAction(
    @common.Body()
    body: MyListUpdateInput
  ): Promise<MyList> {
    return this.service.ListMyItemsAction(body);
  }

  @common.Get("/:id/remove-from-my-list")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RemoveFromMyList(
    @common.Body()
    body: MyListUpdateInput
  ): Promise<string> {
    return this.service.RemoveFromMyList(body);
  }

  @common.Post("/remove-from-my-list")
  @swagger.ApiOkResponse({
    type: MyList,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RemoveFromMyListAction(
    @common.Body()
    body: MyListUpdateInput
  ): Promise<MyList> {
    return this.service.RemoveFromMyListAction(body);
  }
}

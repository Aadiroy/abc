/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MyList as PrismaMyList,
  User as PrismaUser,
} from "@prisma/client";
import { MyListCreateInput } from "./MyListCreateInput";
import { MyList } from "./MyList";
import { MyListWhereInput } from "./MyListWhereInput";
import { MyListUpdateInput } from "./MyListUpdateInput";

export class MyListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MyListCountArgs, "select">): Promise<number> {
    return this.prisma.myList.count(args);
  }

  async myLists<T extends Prisma.MyListFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyListFindManyArgs>
  ): Promise<PrismaMyList[]> {
    return this.prisma.myList.findMany<Prisma.MyListFindManyArgs>(args);
  }
  async myList<T extends Prisma.MyListFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyListFindUniqueArgs>
  ): Promise<PrismaMyList | null> {
    return this.prisma.myList.findUnique(args);
  }
  async createMyList<T extends Prisma.MyListCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyListCreateArgs>
  ): Promise<PrismaMyList> {
    return this.prisma.myList.create<T>(args);
  }
  async updateMyList<T extends Prisma.MyListUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyListUpdateArgs>
  ): Promise<PrismaMyList> {
    return this.prisma.myList.update<T>(args);
  }
  async deleteMyList<T extends Prisma.MyListDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MyListDeleteArgs>
  ): Promise<PrismaMyList> {
    return this.prisma.myList.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.myList
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async AddToMyList(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async AddToMyListAction(args: MyListCreateInput): Promise<MyList> {
    throw new Error("Not implemented");
  }
  async ListMyItems(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListMyItemsAction(args: MyListWhereInput): Promise<MyList> {
    throw new Error("Not implemented");
  }
  async RemoveFromMyList(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async RemoveFromMyListAction(args: MyListUpdateInput): Promise<MyList> {
    throw new Error("Not implemented");
  }
}

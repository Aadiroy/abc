/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TvShow as PrismaTvShow } from "@prisma/client";

export class TvShowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TvShowCountArgs, "select">): Promise<number> {
    return this.prisma.tvShow.count(args);
  }

  async tvShows<T extends Prisma.TvShowFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TvShowFindManyArgs>
  ): Promise<PrismaTvShow[]> {
    return this.prisma.tvShow.findMany<Prisma.TvShowFindManyArgs>(args);
  }
  async tvShow<T extends Prisma.TvShowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TvShowFindUniqueArgs>
  ): Promise<PrismaTvShow | null> {
    return this.prisma.tvShow.findUnique(args);
  }
  async createTvShow<T extends Prisma.TvShowCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TvShowCreateArgs>
  ): Promise<PrismaTvShow> {
    return this.prisma.tvShow.create<T>(args);
  }
  async updateTvShow<T extends Prisma.TvShowUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TvShowUpdateArgs>
  ): Promise<PrismaTvShow> {
    return this.prisma.tvShow.update<T>(args);
  }
  async deleteTvShow<T extends Prisma.TvShowDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TvShowDeleteArgs>
  ): Promise<PrismaTvShow> {
    return this.prisma.tvShow.delete(args);
  }
}

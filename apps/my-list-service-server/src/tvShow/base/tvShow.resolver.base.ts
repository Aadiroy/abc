/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TvShow } from "./TvShow";
import { TvShowCountArgs } from "./TvShowCountArgs";
import { TvShowFindManyArgs } from "./TvShowFindManyArgs";
import { TvShowFindUniqueArgs } from "./TvShowFindUniqueArgs";
import { CreateTvShowArgs } from "./CreateTvShowArgs";
import { UpdateTvShowArgs } from "./UpdateTvShowArgs";
import { DeleteTvShowArgs } from "./DeleteTvShowArgs";
import { TvShowService } from "../tvShow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TvShow)
export class TvShowResolverBase {
  constructor(
    protected readonly service: TvShowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TvShow",
    action: "read",
    possession: "any",
  })
  async _tvShowsMeta(
    @graphql.Args() args: TvShowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TvShow])
  @nestAccessControl.UseRoles({
    resource: "TvShow",
    action: "read",
    possession: "any",
  })
  async tvShows(@graphql.Args() args: TvShowFindManyArgs): Promise<TvShow[]> {
    return this.service.tvShows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TvShow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TvShow",
    action: "read",
    possession: "own",
  })
  async tvShow(
    @graphql.Args() args: TvShowFindUniqueArgs
  ): Promise<TvShow | null> {
    const result = await this.service.tvShow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TvShow)
  @nestAccessControl.UseRoles({
    resource: "TvShow",
    action: "create",
    possession: "any",
  })
  async createTvShow(@graphql.Args() args: CreateTvShowArgs): Promise<TvShow> {
    return await this.service.createTvShow({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TvShow)
  @nestAccessControl.UseRoles({
    resource: "TvShow",
    action: "update",
    possession: "any",
  })
  async updateTvShow(
    @graphql.Args() args: UpdateTvShowArgs
  ): Promise<TvShow | null> {
    try {
      return await this.service.updateTvShow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TvShow)
  @nestAccessControl.UseRoles({
    resource: "TvShow",
    action: "delete",
    possession: "any",
  })
  async deleteTvShow(
    @graphql.Args() args: DeleteTvShowArgs
  ): Promise<TvShow | null> {
    try {
      return await this.service.deleteTvShow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
